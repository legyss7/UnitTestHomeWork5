package seminars.five;

import org.junit.jupiter.api.Test;

public class Home {
    /**
     * Задание 1. Представьте, что вы работаете над разработкой простого
     * приложения для записной книжки, которое позволяет пользователям добавлять,
     * редактировать и удалять контакты.
     * Ваша задача - придумать как можно больше различных тестов (юнит-тесты,
     * интеграционные тесты, сквозные тесты) для этого приложения. Напишите
     * название каждого теста, его тип и краткое описание того,
     * что этот тест проверяет.
     */

    /**
     * 1.1 Unit тесты
     */
    @Test
    void testAddContact() {
        //проверяет добавление контакта
    }
    @Test
    void testAllContact() {
        //проверяет список добавленных контактов
    }
    @Test
    void testRemoveContact() {
        //проверяет что контакт удаляется
    }
    @Test
    void testEditContact() {
        //проверяет изменение данных о контакте
    }
    @Test
    void testSearchContact() {
        //проверяет поиск контакта по заданным параметрам
    }


    /**
     * 1.2 Интеграционные тесты
     */
    @Test
    void testSearchRemoveContact() {
        //проверяет что работает поиск и удаление заданного контакта
    }
    @Test
    void testSearchEditContact() {
        //проверяет что работает поиск и редактирование
        // параметров заданного контакта
    }


    /**
     * 1.3 Сквозные тесты
     */
    @Test
    void testWork() {
        //Проверяет через интерфейс пользователя,
        //что в приложении работают все функции
    }

    /**
     * Задание 2. Ниже список тестовых сценариев. Ваша задача - определить
     * тип каждого теста (юнит-тест,
     * интеграционный тест, сквозной тест) и объяснить, почему вы так решили.
     */

    /**
     * 2.1 Проверка того, что функция addContact корректно добавляет новый контакт
     * в список контактов.
     */
    // Unit тест. Потому что функцию addContact можно протестировать
    // полностью не зависимо от других

     /**
      * 2.2 Проверка того, что при добавлении контакта через пользовательский
      * интерфейс, контакт корректно отображается в списке контактов.
      */
    // Сквозной тест.
    // Потому что происходит полное взаимодействие (Мне было бы лень многократно
    // через консоль вводить много параметров, я бы ошибался и т.д.).
    // Хотя приложение очень простое возможно и интеграционное тестирование


     /**
      * 2.3 Проверка полного цикла работы с контактом: создание контакта,
      *  его редактирование и последующее удаление.
      */
    // Интеграционный тест, если мы будем искать контакт по
    // каким-то параметрам и затем его редактировать или удалять.
    // 2-3 теста интеграционных (создание контакта, удаление, редактирование).
    // Несмотря на то, что сказано, что производится
    // проверка полного цикла с контактом, ни чего несказанно
    // о пользовательском интерфейсе поэтому думаю что сквозной тест не подходит.
}
